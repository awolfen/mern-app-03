{"version":3,"sources":["shared/components/UIElements/Card.js","shared/util/validators.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","shared/components/FormElements/Input.js","shared/hooks/form-hook.js","shared/components/FormElements/ImageUpload.js","user/pages/Auth.js"],"names":["Card","props","className","style","children","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","type","VALIDATOR_MINLENGTH","val","VALIDATOR_EMAIL","validate","value","validators","isValid","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","validator","trim","test","inputReducer","state","action","isTouched","Input","useReducer","valid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","placeholder","onChange","onBlur","rows","htmlFor","label","errorText","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","ImageUpload","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","filePickerRef","useRef","fileReader","FileReader","onload","result","readAsDataURL","ref","display","accept","pickedFile","fileIsValid","files","center","src","alt","onClick","current","click","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","email","password","inputHandler","setFormData","authSubmitHandler","a","preventDefault","process","JSON","stringify","responseData","login","userId","token","console","log","formData","FormData","append","name","image","Fragment","onClear","asOverlay","onSubmit","disabled","inverse","undefined"],"mappings":"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","file":"static/js/4.3cf11b95.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\nconst VALIDATOR_TYPE_MINLENGTH = 'MINLENGTH';\nconst VALIDATOR_TYPE_MAXLENGTH = 'MAXLENGTH';\nconst VALIDATOR_TYPE_MIN = 'MIN';\nconst VALIDATOR_TYPE_MAX = 'MAX';\nconst VALIDATOR_TYPE_EMAIL = 'EMAIL';\nconst VALIDATOR_TYPE_FILE = 'FILE';\n\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\nexport const VALIDATOR_MINLENGTH = val => ({\n  type: VALIDATOR_TYPE_MINLENGTH,\n  val: val\n});\nexport const VALIDATOR_MAXLENGTH = val => ({\n  type: VALIDATOR_TYPE_MAXLENGTH,\n  val: val\n});\nexport const VALIDATOR_MIN = val => ({ type: VALIDATOR_TYPE_MIN, val: val });\nexport const VALIDATOR_MAX = val => ({ type: VALIDATOR_TYPE_MAX, val: val });\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\n\nexport const validate = (value, validators) => {\n  let isValid = true;\n  for (const validator of validators) {\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\n      isValid = isValid && value.trim().length > 0;\n    }\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\n      isValid = isValid && value.trim().length >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\n      isValid = isValid && value.trim().length <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MIN) {\n      isValid = isValid && +value >= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_MAX) {\n      isValid = isValid && +value <= validator.val;\n    }\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\n    }\n  }\n  return isValid;\n};\n","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React, { useEffect, useReducer } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n    switch (action.type) {\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':\n            return {\n                ...state,\n                isTouched: true\n            };\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n    const [inputState, dispatch] = useReducer(inputReducer, {\n        value: props.value || '',\n        isTouched: false,\n        isValid: props.valid || false\n    });\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    //useEffect? -> function with an array of dependencies that trigger the function, onInput also must be imported\n    useEffect(() => {\n        onInput(\n            id,\n            value,\n            isValid\n        )\n    }, [id, onInput, value, isValid]);\n\n    const changeHandler = event => {\n        dispatch({ type: 'CHANGE', val: event.target.value, validators: props.validators });\n    };\n\n    const touchHandler = () => {\n        dispatch({ type: 'TOUCH' });\n    };\n\n    const element =\n        props.element === 'input' ? (\n            <input\n                id={props.id}\n                type={props.type}\n                placeholder={props.placeholder}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        ) : (\n            <textarea\n                id={props.id}\n                rows={props.rows || 3}\n                onChange={changeHandler}\n                onBlur={touchHandler}\n                value={inputState.value}\n            />\n        );\n\n    return (\n        <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\n            <label htmlFor={props.id}>{props.label}</label>\n            {element}\n            {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n        </div>\n    );\n};\n\nexport default Input;","import { useCallback, useReducer } from 'react';\n\nconst formReducer = (state, action) => {\n    switch (action.type) {\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for (const inputId in state.inputs) {\n                //this line fixes a bug when you switch between login/signup forms, and the name field is undefined\n                if (!state.inputs[inputId]) {\n                    continue;\n                }\n                if (inputId === action.inputId) {\n                    formIsValid = formIsValid && action.isValid;\n                } else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: { value: action.value, isValid: action.isValid }\n                },\n                isValid: formIsValid\n            };\n        case 'SET_DATA':\n            return {\n                inputs: action.inputs,\n                isValid: action.formIsValid\n            }\n        default:\n            return state;\n    }\n};\n\nexport const useForm = (initialInputs, initialFormValidity) => {\n    const [formState, dispatch] = useReducer(formReducer,\n        {\n            inputs: initialInputs,\n            isValid: initialFormValidity\n        }\n    );\n\n\n    // why useCallback()? -> inputHandler could cause an element to refresh, therefore creating a new onInput, and a new input handler, potentially leading to an infinite loop\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({\n            type: 'INPUT_CHANGE',\n            value: value,\n            isValid: isValid,\n            inputId: id\n        });\n    }, []);\n\n    const setFormData = useCallback((inputData, formValidity) => {\n        dispatch({\n            type: 'SET_DATA',\n            inputs: inputData,\n            formIsValid: formValidity\n        });\n    }, []);\n\n    return [formState, inputHandler, setFormData];\n};\n\n","import React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport Button from '../FormElements/Button';\r\n\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState(false);\r\n\r\n    const filePickerRef = useRef();\r\n\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const fileReader = new FileReader();\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result);\r\n        };\r\n        fileReader.readAsDataURL(file);\r\n    }, [file]);\r\n\r\n    const pickHandler = event => {\r\n        let pickedFile;\r\n        let fileIsValid = isValid; // necessary as isValid will not update inside of the function\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            pickedFile = event.target.files[0];\r\n            setFile(pickedFile);\r\n            setIsValid(true);\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false)\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input\r\n                id={props.id}\r\n                ref={filePickerRef}\r\n                style={{ display: 'none' }}\r\n                type=\"file\"\r\n                accept=\".jpg,.png,.jpeg\"\r\n                onChange={pickHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && 'center'}`} >\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n                    {!previewUrl && <p>Please pick an image.</p>}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>\r\n                    PICK IMAGE\r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;","import React, { useContext, useState } from 'react';\n\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport Button from '../../shared/components/FormElements/Button';\nimport Input from '../../shared/components/FormElements/Input';\nimport Card from '../../shared/components/UIElements/Card';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\n\nimport './Auth.css';\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler, setFormData] = useForm(\n        {\n            email: {\n                value: '',\n                isValid: false\n            },\n            password: {\n                value: '',\n                isValid: false\n            }\n        },\n        false\n    );\n\n    const loginModeHandler = (event) => {\n        event.preventDefault();\n        if (!isLoginMode) {\n            setFormData(\n                {\n                    ...formState.inputs,\n                    name: undefined,\n                    image: undefined\n                },\n                formState.inputs.email.isValid && formState.inputs.password.isValid);\n        } else {\n            setFormData(\n                {\n                    ...formState.inputs,\n                    name: {\n                        value: '',\n                        isValid: false\n                    },\n                    image: {\n                        value: null,\n                        isValid: false\n                    }\n                },\n                false\n            )\n        }\n\n        setIsLoginMode(!isLoginMode);\n    };\n\n    const authSubmitHandler = async (event) => {\n        event.preventDefault();\n\n\n\n        if (isLoginMode) {\n            try {\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n                    'POST',\n                    JSON.stringify({\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type': 'application/json'\n                    }\n                );\n                auth.login(responseData.userId, responseData.token);\n            } catch (err) {\n                console.log(err);\n                // empty catch block as errors are handled in sendRequest, this simply ensures no login on error\n            }\n        } else {\n            try {\n                const formData = new FormData();\n                formData.append('name', formState.inputs.name.value);\n                formData.append('email', formState.inputs.email.value);\n                formData.append('password', formState.inputs.password.value);\n                formData.append('image', formState.inputs.image.value);\n                const responseData = await sendRequest(\n                    `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n                    'POST',\n                    formData // headers automatically handled by fetch\n                );\n                auth.login(responseData.userId, responseData.token);\n            } catch (err) {\n                console.log(err);\n                // empty catch block as errors are handled in sendRequest, this simply ensures no login on error\n            }\n        }\n\n    };\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError} />\n            <Card className=\"authentication\">\n                {isLoading && <LoadingSpinner asOverlay />}\n                <h2>{isLoginMode ? \"Login Required\" : \"Register E-Mail\"}</h2>\n                <hr />\n                <form className=\"form\" onSubmit={authSubmitHandler}>\n                    {!isLoginMode && (\n                        <Input\n                            id=\"name\"\n                            element=\"input\"\n                            type=\"text\"\n                            label=\"Name\"\n                            validators={[VALIDATOR_REQUIRE()]}\n                            errorText=\"Please enter a name.\"\n                            onInput={inputHandler}\n                        />\n                    )}\n                    {!isLoginMode && (\n                        <ImageUpload\n                            center\n                            id=\"image\"\n                            onInput={inputHandler}\n                            errorText=\"Please provide an image.\"\n                        />\n                    )}\n                    <Input\n                        id=\"email\"\n                        element=\"input\"\n                        type=\"email\"\n                        label=\"E-Mail\"\n                        validators={[VALIDATOR_EMAIL()]}\n                        errorText=\"Please enter a valid email address.\"\n                        onInput={inputHandler}\n                    />\n                    <Input\n                        id=\"password\"\n                        element=\"input\"\n                        type=\"password\"\n                        label=\"Password\"\n                        validators={isLoginMode ? [VALIDATOR_REQUIRE()] : [VALIDATOR_MINLENGTH(6)]}\n                        errorText={isLoginMode ? \"Please enter a password.\" : \"Your password must be at least 6 characters long.\"}\n                        onInput={inputHandler}\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>{isLoginMode ? \"LOGIN\" : \"SIGN UP\"}</Button>\n                    <Button inverse onClick={loginModeHandler}>{`switch to ${isLoginMode ? \"sign up\" : \"login\"}`}</Button>\n                </form>\n            </Card>\n        </React.Fragment>\n    )\n};\n\nexport default Auth;"],"sourceRoot":""}